<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/util 
					    http://www.springframework.org/schema/util/spring-util-3.0.xsd
					    http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.myspringmvc" ></context:component-scan>
	<context:annotation-config/>
	<mvc:annotation-driven/>
	
	
   <!--memcached 缓存配置 -->
   <!-- <import resource="app-context-memcache.xml" /> -->
   <!-- <import resource="app-context-spymemcached.xml" /> -->
   
   
    <!--   
        枚举类型要想注入到类中，一定要先使用org.springframework.beans.factory.config.FieldRetrievingFactoryBean类将枚举类型进行转换  
        将DefaultHashAlgorithm.KETAMA_HASH转换为KETAMA_HASH这个bean，  
        然后在要注入的bean中使用<property name="hashAlg" ref="KETAMA_HASH" />引用即可。  
     -->  
    <bean id="KETAMA_HASH" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">  
        <property name="staticField" value="net.spy.memcached.DefaultHashAlgorithm.KETAMA_HASH" />  
    </bean>  
  
    <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean">  
  
        <!-- 一个字符串，包括由空格或逗号分隔的主机或IP地址与端口号 -->  
        <property name="servers" value="192.168.1.100:11211" />  
        <!-- 指定要使用的协议(BINARY,TEXT),默认是TEXT -->  
        <property name="protocol" value="BINARY" />  
        <!-- 设置默认的转码器(默认以net.spy.memcached.transcoders.SerializingTranscoder) -->  
        <property name="transcoder">  
            <bean class="net.spy.memcached.transcoders.SerializingTranscoder">  
                <property name="compressionThreshold" value="1024" />  
            </bean>  
        </property>  
        <!-- 以毫秒为单位设置默认的操作超时时间 -->  
        <property name="opTimeout" value="1000" />  
        <property name="timeoutExceptionThreshold" value="1998" />  
        <!-- 设置哈希算法 -->  
        <property name="hashAlg" ref="KETAMA_HASH" />  
        <!-- 设置定位器类型(ARRAY_MOD,CONSISTENT),默认是ARRAY_MOD -->  
        <property name="locatorType" value="CONSISTENT" />  
        <!-- 设置故障模式(取消，重新分配，重试)，默认是重新分配 -->  
        <property name="failureMode" value="Redistribute" />  
        <!-- 想使用Nagle算法，设置为true -->  
        <property name="useNagleAlgorithm" value="false" />  
    </bean>  
   
   
     
   
   
   
   <!-- 定时器配置文件 -->
   <!-- <import resource="quartz-config.xml" /> -->   
	
	
	
	
    
    
	<!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:properties/jdbc.properties" />
	</bean>
	<!-- 配置数据源 -->
    <bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/learn" />
		<property name="username" value="root" />
		<property name="password" value="111111" />
	</bean>
	

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mappings/**/*.xml"></property>
		<!-- 就算不引入mybatis-config文件也可以正常启动程序了 -->
		<!-- <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property> -->
	</bean> 
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.myspringmvc/**/dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceDev" />
	</bean>
	
  <!-- 为了使用@Resource标签，这里必须配置一个后置处理器 -->  
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />   	
	
	
</beans>
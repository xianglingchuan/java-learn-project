<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/util 
					    http://www.springframework.org/schema/util/spring-util-3.0.xsd
					    http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.myspringmvc" ></context:component-scan>
	<context:annotation-config/>
	<mvc:annotation-driven/>
	
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <bean id="cBookAuthAspect" class="com.aop.config.CBookAuthAspect"/>
	 -->
	
	<!-- 自动扫描 -->
	<!-- <context:component-scan base-package="com.springmvc/**/service" /> -->
	<!-- <context:component-scan base-package="com.springmvc" /> -->
	<!-- <context:component-scan base-package="com.myspringmvc" ></context:component-scan>  -->
    <!--<context:component-scan base-package="com.snaillove.common.service" />-->
    
    <!-- Junit 测试是否正确引入spring配置文件 -->
    <!-- <bean id="currentDate" class="java.util.Date"></bean> -->
    
    
	<!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:properties/jdbc.properties" />
	</bean>
	<!-- 配置数据源 -->
    <bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/learn" />
		<property name="username" value="root" />
		<property name="password" value="111111" />
	</bean>
	

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mappings/**/*.xml"></property>
		<!-- 就算不引入mybatis-config文件也可以正常启动程序了 -->
		<!-- <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property> -->
	</bean> 
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.myspringmvc/**/dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceDev" />
	</bean>
	
	
	
	
	
	
	
   <!-- =========  配置Memcached ========= -->  
   <!-- 开启缓存 -->    
   <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true" />    
    <!-- 导入外部properties -->  
    <context:property-placeholder location="classpath:memcached.properties"/>  
      
     <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"  
        factory-method="getInstance" init-method="initialize" destroy-method="shutDown">  
       <constructor-arg>  
            <value>neeaMemcachedPool</value>  
        </constructor-arg>  
        <property name="servers">  
            <list>  
                <value>${memcache.server}</value>  
            </list>  
        </property>  
        <property name="initConn">  
            <value>${memcache.initConn}</value>  
        </property>  
        <property name="minConn">  
            <value>${memcache.minConn}</value>  
        </property>  
        <property name="maxConn">  
            <value>${memcache.maxConn}</value>  
        </property>  
        <property name="maintSleep">  
            <value>${memcache.maintSleep}</value>  
        </property>  
        <property name="nagle">  
            <value>${memcache.nagle}</value>  
        </property>  
        <property name="socketTO">  
            <value>${memcache.socketTO}</value>  
        </property>  
    </bean>  
      
    <!-- 配置MemcachedClient -->  
    <bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient">  
        <constructor-arg>  
            <value>neeaMemcachedPool</value>  
        </constructor-arg>  
    </bean>  
      
    <!-- 配置缓存管理 -->  
    <bean id="cacheManager" class="com.myspringmvc.memcached.cached.MemcachedCacheManager">  
        <property name="memcachedClient" ref="memcachedClient"/>  
        <!-- 配置缓存时间 -->   
        <property name="configMap">  
             <map>  
                 <!-- key缓存对象名称   value缓存过期时间 -->   
                 <entry key="systemCache" value="3600"/>  
             </map>  
        </property>  
    </bean>  	
	
	
	
	
	
</beans>